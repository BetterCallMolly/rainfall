#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import subprocess
import shutil
import pexpect
from glob import glob

PORT = 4243

def does_compile(source_file: str) -> bool:
    """
    Checks whether the passed C source file compiles without errors.
    """
    shutil.copy(source_file, "/tmp/tmptmptmptmp.c")
    # Try to compile the source file
    try:
        compiler = "c++" if source_file.startswith("level9") else "gcc"
        print(f"[{compiler}]", end=" ", flush=True)
        subprocess.check_output(
            [compiler, "/tmp/tmptmptmptmp.c","-o", "/tmp/tmptmptmptmp"],
            stderr=subprocess.STDOUT,
            universal_newlines=True,
        )

    # If there is an error, return False
    except subprocess.CalledProcessError:
        return False
    return True

def check_login(username: str, password: str) -> bool:
    """
    Uses pexpect to check whether the passed username and password are valid with ssh
    Calls whoami to check whether the user is logged in
    """
    proc = pexpect.spawn("ssh {}@localhost -p {}".format(username, PORT))
    try:
        proc.expect("password:")
        proc.sendline(password)
        print("connecting...", end="", flush=True)
        proc.expect("  GCC stack protector support")
        print(" checksec!", end="", flush=True)
        proc.sendline("whoami")
        print(" waiting for whoami", end="", flush=True)
        proc.expect(username)
        proc.sendline("exit")
        proc.wait()
        return proc.exitstatus == 0
    except KeyboardInterrupt:
        proc.close()
        return False
    except:
        return False

flag_dict = {}

# Init flag dict
for i in range(0, 10): # levelX
    if i == 0:
        flag_dict["level0"] = "level0"
    else:
        with open("level{}/flag".format(i-1), "rt") as f:
            flag_dict["level{}".format(i)] = f.read().strip()

for i in range(0, 4): # bonusX
    if i == 0:
        with open("level9/flag", "rt") as f:
            flag_dict["bonus0"] = f.read().strip()
    else:
        with open("bonus{}/flag".format(i-1), "rt") as f:
            flag_dict["bonus{}".format(i)] = f.read().strip()

if __name__ == "__main__":
    walkthroughs = sorted(glob("*/walkthrough"))
    sources = sorted(glob("*/source"))
    ressources = sorted(glob("*/ressources/*"))
    print("-" * 10 + " Walkthroughs " + "-" * 10)
    for walkthrough in walkthroughs:
        with open(walkthrough, "r") as f:
            content = f.read().strip()
        print("## {} | {} bytes / {} lines".format(walkthrough.split("/")[0], len(content), len(content.split("\n"))))
    print("-" * 10 + " Sources " + "-" * 10)
    for source in sources:
        with open(source, "r") as f:
            content = f.read().strip()
        print("## {} | {} bytes / {} lines".format(source.split("/")[0], len(content), len(content.split("\n"))))
    if len(sys.argv) > 1 and any([arg in sys.argv for arg in ["-c", "--compile"]]):
        print("-" * 10 + " Compile Check " + "-" * 10)
        for source in sources:
            print(f"## {source.split('/')[0]} compiling... ", end="", flush=True)
            if does_compile(source):
                print("OK".format(source))
            else:
                print("KO".format(source))
    if len(sys.argv) > 1 and any([arg in sys.argv for arg in ["-f", "--flags"]]):
        print("-" * 10 + " Flags Check " + "-" * 10)
        for username, password in flag_dict.items():
            print(f"## {username} -> ", end="", flush=True)
            if check_login(username, password.strip()):
                print(" OK")
            else:
                print(" KO")